"use strict";let Chrome=new APIchrome;class notesController{constructor(){this.load=!0,Chrome.onUpdated({loadNotes:e=>{this.loadNotes(e)}}),Chrome.onMessages({sendUrlContentScript:async()=>{let e=await Chrome.getTab("active");Chrome.send({action:"urlContentScript",url:e[0].url},e[0].id)},hiddenNotes:()=>{this.hiddenNotes()},showNotes:()=>{this.showNotes()},deleteAll:async e=>{let t=await this.deleteAll();Chrome.send(t)},verifyURL:e=>{this.verifyURL(e)},sendUrlActive:async()=>{let e=await Chrome.getTab("active");Chrome.send({action:"recivedUrlActive",url:e[0].url})}}),Chrome.onCommand({createNote:async()=>{let e=await Chrome.getStorage("defaultConfigNote");this.verifyURL({verifyURL:"createNote",noteColor:e.colors.color,fontColor:e.colors.font})},showHidden:async()=>{let e=await Chrome.getStorage("hiddenNotes");"show"==e?(this.hiddenNotes(),Chrome.setStorage("hiddenNotes","hidden")):"hidden"==e&&(this.showNotes(),Chrome.setStorage("hiddenNotes","show"))}})}async verifyURL(e){let t=await Chrome.getTab("active");"empty"==t||0==Chrome.filter(t[0])?(delete e.verifyURL,Chrome.send({action:"accessUrlBloked"})):(e.action=e.verifyURL,delete e.verifyURL,e.url=t[0].url,Chrome.send(e,t[0].id))}hiddenNotes(){this.load=!1,this.deleteAll("hiddenNotes")}showNotes(){this.load=!0,this.showAllNotes()}async showAllNotes(){let e=await Chrome.getTab();if("empty"!=e)for(let t=0;t<e.length;t++)Chrome.filter(e[t])&&this.loadNotes({tabId:e[t].id,status:e[t].status})}async deleteAll(e="deleteAll"){return await new Promise(async(t,o)=>{let s=0,a=await Chrome.getTab();if("empty"!=a)for(let t=0;t<a.length;t++)if(Chrome.filter(a[t])&&"complete"==a[t].status){let o=a[t].id;try{await Chrome.exeScript(o,{code:'EasyNotes.removeNotesHere({action:"'+e+'",url:"'+a[t].url+'", tabId:"'+o+'"})'})}catch(e){console.log("ERROR: es posible que deba cargar nuevamente la pestaÃ±a"+o+" para usar EasyNotes.("+a[t].url+") ")}}let r=await Chrome.getStorage();if("deleteAll"==e&&"empty"!=r)for(let e in r)"http"!=e.substring(0,4)&&"file"!=e.substring(0,4)&&"https"!=e.substring(0,5)||(await Chrome.removeStorage([e]),s++);t({action:"notesDelete",notesDelete:s=s>0?s:"0"})})}async loadNotes(e){if(1==this.load){let t=await Chrome.getTab(e.tabId),o=await Chrome.getStorage("hiddenNotes");if("empty"!=t&&"show"==o&&Chrome.filter(t)){let o=t.url;Chrome.send({action:"cleanNotesPageDynamic",url:o},e.tabId),Chrome.send({action:"loadNotes",url:o},e.tabId)}}}}new notesController;